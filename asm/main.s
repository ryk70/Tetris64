;
; File generated by cc65 v 2.17 - Git N/A
;
	.fopt		compiler,"cc65 v 2.17 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_rand
	.import		__randomize
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputcxy
	.import		_cprintf
	.import		_cgetc
	.import		_cpeekc
	.import		_cpeekcolor
	.import		_cursor
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_cclearxy
	.import		_screensize
	.import		_strlen
	.export		_main

.segment	"DATA"

_i:
	.byte	$00
_j:
	.byte	$00
_isPlaced:
	.byte	$00
_blockTile:
	.byte	$A9

.segment	"RODATA"

_Title:
	.byte	$D4,$C5,$D4,$D2,$C9,$D3,$36,$34,$00
_Inst:
	.byte	$D0,$D2,$C5,$D3,$D3,$20,$D8,$20,$D4,$CF,$20,$D0,$CC,$C1,$D9,$00
L09D7:
	.byte	$CC,$49,$4E,$45,$53,$20,$43,$4C,$45,$41,$52,$45,$44,$3A,$20,$25
	.byte	$44,$00
L09C9	:=	L09D7+0
L001D:
	.byte	$25,$53,$00
L0026	:=	L001D+0

.segment	"BSS"

_xdim:
	.res	1,$00
_ydim:
	.res	1,$00
_isGameOver:
	.res	1,$00
_curTet:
	.res	1,$00
_curPos:
	.res	8,$00
_linesCleared:
	.res	2,$00
_curColor:
	.res	1,$00
_initPlacement:
	.res	1,$00
_rotState:
	.res	1,$00
_dirKey:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_title: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$00
	jsr     _bgcolor
	lda     #$00
	jsr     _bordercolor
	lda     #$01
	jsr     _textcolor
	lda     _xdim
	jsr     pusha0
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _strlen
	jsr     tossubax
	jsr     shrax1
	jsr     pusha
	lda     _ydim
	lsr     a
	sec
	sbc     #$01
	jsr     _gotoxy
	lda     #<(L001D)
	ldx     #>(L001D)
	jsr     pushax
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	lda     _xdim
	jsr     pusha0
	lda     #<(_Inst)
	ldx     #>(_Inst)
	jsr     _strlen
	jsr     tossubax
	jsr     shrax1
	jsr     pusha
	lda     _ydim
	lsr     a
	jsr     _gotoxy
	lda     #<(L0026)
	ldx     #>(L0026)
	jsr     pushax
	lda     #<(_Inst)
	ldx     #>(_Inst)
	jsr     pushax
	ldy     #$04
	jmp     _cprintf

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$01
	sta     _i
	jmp     L09FA
L09F9:	lda     _i
	clc
	adc     #$05
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #$EF
	jsr     _cputcxy
	inc     _i
L09FA:	lda     _i
	cmp     #$0B
	bcc     L09F9
	lda     #$01
	sta     _i
	jmp     L09FC
L09FB:	lda     _i
	clc
	adc     #$05
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #$F7
	jsr     _cputcxy
	inc     _i
L09FC:	lda     _i
	cmp     #$0B
	bcc     L09FB
	lda     #$01
	sta     _i
	jmp     L09FD
L0043:	lda     #$05
	jsr     pusha
	lda     _i
	clc
	adc     #$02
	jsr     pusha
	lda     #$EA
	jsr     _cputcxy
	inc     _i
L09FD:	lda     _i
	cmp     #$15
	bcc     L0043
	lda     #$01
	sta     _i
	jmp     L09FE
L004E:	lda     #$10
	jsr     pusha
	lda     _i
	clc
	adc     #$02
	jsr     pusha
	lda     #$F4
	jsr     _cputcxy
	inc     _i
L09FE:	lda     _i
	cmp     #$15
	bcc     L004E
	lda     #$03
	sta     _i
	lda     #$06
	sta     _j
	jmp     L0A00
L005F:	lda     _i
	jsr     pusha
	lda     _j
	jsr     pusha
	lda     #$20
	jsr     _cputcxy
	inc     _j
L09FF:	lda     _j
	cmp     #$10
	bcc     L005F
	inc     _i
L0A00:	lda     _i
	cmp     #$17
	bcc     L09FF
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkIfEmpty (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkIfEmpty: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L006D
	ldx     #$00
	lda     #$01
	jmp     incsp2
L006D:	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ drawTet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawTet: near

.segment	"CODE"

	lda     _curTet
	bne     L0A07
	lda     #$0E
	sta     _curColor
	lda     #$09
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     #$0A
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     #$0B
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     #$0C
	sta     _curPos+6
	lda     #$03
	sta     _curPos+7
L0A07:	lda     _curTet
	cmp     #$01
	bne     L0A08
	lda     #$07
	sta     _curColor
	lda     #$0A
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     #$0B
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     #$0A
	sta     _curPos+4
	lda     #$04
	sta     _curPos+5
	lda     #$0B
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
L0A08:	lda     _curTet
	cmp     #$02
	bne     L0A09
	lda     #$04
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
L0A09:	lda     _curTet
	cmp     #$03
	bne     L0A0A
	lda     #$05
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$04
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$04
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+6
	lda     #$03
	sta     _curPos+7
L0A0A:	lda     _curTet
	cmp     #$04
	bne     L0A0B
	lda     #$02
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+4
	lda     #$04
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
L0A0B:	lda     _curTet
	cmp     #$05
	bne     L0A0C
	lda     #$08
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
L0A0C:	lda     _curTet
	cmp     #$06
	bne     L0A0D
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
L0A0D:	lda     #$00
	sta     _rotState
	tax
	sta     _i
	jmp     L0A0F
L0A0E:	lda     _i
	asl     a
	bcc     L0A01
	ldx     #$01
L0A01:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A05
	inx
	clc
L0A05:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _checkIfEmpty
	cmp     #$01
	bne     L0176
	sta     _isGameOver
	rts
L0176:	inc     _i
	ldx     #$00
L0A0F:	lda     _i
	cmp     #$04
	bcc     L0A0E
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0187
L0A10:	lda     _i
	asl     a
	bcc     L0A03
	ldx     #$01
L0A03:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A06
	inx
	clc
L0A06:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     _blockTile
	jsr     _cputcxy
	inc     _i
L0187:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L0A10
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pickTet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pickTet: near

.segment	"CODE"

	jsr     __randomize
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	sta     _curTet
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	clc
	adc     #$06
	sta     _initPlacement
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkBotCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkBotCollision: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	tax
	sta     _i
	jmp     L0A1D
L0A1B:	lda     _i
	asl     a
	bcc     L0A17
	ldx     #$01
	clc
L0A17:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	sec
	dey
	sbc     (sp),y
	bcc     L0A1C
	beq     L0A1C
	lda     _i
	asl     a
	bcc     L0A18
	inx
	clc
L0A18:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	dey
	sta     (sp),y
L0A1C:	inc     _i
	ldx     #$00
L0A1D:	lda     _i
	cmp     #$04
	bcc     L0A1B
	stx     _i
	jmp     L0A26
L0A1E:	lda     _i
	asl     a
	bcc     L0A19
	ldx     #$01
	clc
L0A19:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	dey
	cmp     (sp),y
	bcc     L0A25
	lda     _i
	asl     a
	bcc     L0A14
	inx
L0A14:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A1A
	inx
	clc
L0A1A:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     _gotoxy
	lda     _curTet
	cmp     #$02
	bne     L01C0
	lda     _rotState
	bne     L01C0
	lda     _i
	beq     L0A25
	cmp     #$02
	beq     L0A25
L01C0:	jsr     _cpeekc
	cmp     #$20
	beq     L01C4
	ldx     #$00
	lda     #$01
	jmp     incsp1
L01C4:	lda     _curTet
	cmp     #$02
L0A25:	inc     _i
	ldx     #$00
L0A26:	lda     _i
	cmp     #$04
	jcc     L0A1E
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ moveTet (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveTet: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	jne     L0A48
	sta     _i
	jmp     L0A43
L01D2:	lda     #$00
	jsr     _textcolor
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A27
	inx
L0A27:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A39
	inx
	clc
L0A39:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	inc     _i
L0A43:	lda     _i
	cmp     #$04
	bcc     L01D2
	ldx     #$00
	stx     _i
	jmp     L0A45
L0A44:	lda     _i
	asl     a
	bcc     L0A3A
	ldx     #$01
	clc
L0A3A:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A3B
	inx
	clc
L0A3B:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	iny
	sta     (ptr1),y
	inc     _i
	jsr     incsp1
	ldx     #$00
L0A45:	lda     _i
	cmp     #$04
	bcc     L0A44
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L01F5
L0A46:	lda     _i
	asl     a
	bcc     L0A2B
	ldx     #$01
L0A2B:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A3C
	inx
	clc
L0A3C:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$A9
	jsr     _cputcxy
	inc     _i
L01F5:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L0A46
	ldy     #$00
L0A48:	lda     (sp),y
	cmp     #$01
	jne     L0A4E
	sty     _i
	jmp     L0A49
L0204:	lda     #$00
	jsr     _textcolor
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A2D
	inx
L0A2D:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A3D
	inx
	clc
L0A3D:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	inc     _i
L0A49:	lda     _i
	cmp     #$04
	bcc     L0204
	ldx     #$00
	stx     _i
	jmp     L0A4B
L0A4A:	lda     _i
	asl     a
	bcc     L0A2F
	ldx     #$01
L0A2F:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A3E
	inx
	clc
L0A3E:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (ptr1),y
	inc     _i
	jsr     incsp1
	ldx     #$00
L0A4B:	lda     _i
	cmp     #$04
	bcc     L0A4A
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0227
L0A4C:	lda     _i
	asl     a
	bcc     L0A31
	ldx     #$01
L0A31:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A3F
	inx
	clc
L0A3F:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$A9
	jsr     _cputcxy
	inc     _i
L0227:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L0A4C
	ldy     #$00
L0A4E:	lda     (sp),y
	cmp     #$02
	beq     L0A53
	jmp     incsp1
L0A53:	sty     _i
	jmp     L0A4F
L0236:	lda     #$00
	jsr     _textcolor
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A33
	inx
L0A33:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A40
	inx
	clc
L0A40:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	inc     _i
L0A4F:	lda     _i
	cmp     #$04
	bcc     L0236
	ldx     #$00
	stx     _i
	jmp     L0A51
L0A50:	lda     _i
	asl     a
	bcc     L0A35
	ldx     #$01
L0A35:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A41
	inx
	clc
L0A41:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (ptr1),y
	inc     _i
	jsr     incsp1
	ldx     #$00
L0A51:	lda     _i
	cmp     #$04
	bcc     L0A50
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0259
L0A52:	lda     _i
	asl     a
	bcc     L0A37
	ldx     #$01
L0A37:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A42
	inx
	clc
L0A42:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$A9
	jsr     _cputcxy
	inc     _i
L0259:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L0A52
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ handleTet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleTet: near

.segment	"CODE"

	jsr     _checkBotCollision
	cmp     #$01
	bne     L0265
	sta     _isPlaced
	rts
L0265:	lda     #$00
	jmp     _moveTet

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkLeftCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkLeftCollision: near

.segment	"CODE"

	lda     #$FF
	jsr     pusha
	ldx     #$00
	stx     _i
	jmp     L0A5D
L0A5B:	lda     _i
	asl     a
	bcc     L0A54
	ldx     #$01
L0A54:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	ldy     #$00
	cmp     (sp),y
	bcs     L0A5C
	lda     _i
	asl     a
	bcc     L0A55
	inx
L0A55:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
L0A5C:	inc     _i
	ldx     #$00
L0A5D:	lda     _i
	cmp     #$04
	bcc     L0A5B
	stx     _i
	jmp     L0A60
L0A5E:	lda     _i
	asl     a
	bcc     L0A56
	ldx     #$01
L0A56:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L0A5F
	bne     L028F
L0A5F:	lda     _i
	asl     a
	bcc     L0A57
	inx
L0A57:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	sec
	sbc     #$01
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A5A
	inx
	clc
L0A5A:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L028F
	ldx     #$00
	lda     #$01
	jmp     incsp1
L028F:	inc     _i
	ldx     #$00
L0A60:	lda     _i
	cmp     #$04
	bcc     L0A5E
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkRightCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkRightCollision: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	tax
	sta     _i
	jmp     L0A6A
L0A68:	lda     _i
	asl     a
	bcc     L0A61
	ldx     #$01
L0A61:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L0A69
	beq     L0A69
	lda     _i
	asl     a
	bcc     L0A62
	inx
L0A62:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
L0A69:	inc     _i
	ldx     #$00
L0A6A:	lda     _i
	cmp     #$04
	bcc     L0A68
	stx     _i
	jmp     L0A6D
L0A6B:	lda     _i
	asl     a
	bcc     L0A63
	ldx     #$01
L0A63:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	ldy     #$00
	cmp     (sp),y
	bcc     L02B7
	lda     _i
	asl     a
	bcc     L0A64
	inx
L0A64:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A67
	inx
	clc
L0A67:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L02B7
	ldx     #$00
	lda     #$01
	jmp     incsp1
L02B7:	inc     _i
	ldx     #$00
L0A6D:	lda     _i
	cmp     #$04
	bcc     L0A6B
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkRotateCollision (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkRotateCollision: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	tax
	lda     _curTet
	jne     L0A72
	lda     _rotState
	bne     L0A70
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	sec
	sbc     #$02
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A9A
	jmp     incsp2
L0A9A:	lda     #$01
	jmp     incsp2
L0A70:	lda     _curPos+4
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+5
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+5
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	sec
	sbc     #$02
	jsr     pusha
	lda     _curPos+5
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A9B
	jmp     incsp2
L0A9B:	lda     #$01
	jmp     incsp2
L0A72:	lda     _curTet
	cmp     #$02
	jne     L0A76
	lda     _rotState
	bne     L0A73
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L02FE
	ldx     #$00
	lda     #$01
	jmp     incsp2
L02FE:	tax
	jmp     incsp2
L0A73:	lda     _rotState
	cmp     #$01
	bne     L0A74
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L030A
	ldx     #$00
	lda     #$01
	jmp     incsp2
L030A:	tax
	jmp     incsp2
L0A74:	lda     _rotState
	cmp     #$02
	bne     L0A75
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L0316
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0316:	tax
	jmp     incsp2
L0A75:	lda     _rotState
	cmp     #$03
	bne     L0A76
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L0322
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0322:	tax
	jmp     incsp2
L0A76:	lda     _curTet
	cmp     #$03
	jne     L0A79
	lda     _rotState
	bne     L032E
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+5
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A9C
	jmp     incsp2
L0A9C:	lda     #$01
	jmp     incsp2
L032E:	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A9D
	jmp     incsp2
L0A9D:	lda     #$01
	jmp     incsp2
L0A79:	lda     _curTet
	cmp     #$04
	jne     L0A7D
	lda     _rotState
	bne     L0A7B
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A9E
	jmp     incsp2
L0A9E:	lda     #$01
	jmp     incsp2
L0A7B:	lda     _curPos+4
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+5
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A9F
	jmp     incsp2
L0A9F:	lda     #$01
	jmp     incsp2
L0A7D:	lda     _curTet
	cmp     #$05
	jne     L0A8C
	lda     _rotState
	jne     L0A80
	ldy     #$01
	lda     (sp),y
	bne     L0388
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA0
	jmp     incsp2
L0AA0:	lda     #$01
	jmp     incsp2
L0388:	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA1
	jmp     incsp2
L0AA1:	lda     #$01
	jmp     incsp2
L0A80:	lda     _rotState
	cmp     #$01
	jne     L0A84
	tay
	lda     (sp),y
	bne     L0A82
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA2
	jmp     incsp2
L0AA2:	lda     #$01
	jmp     incsp2
L0A82:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA3
	jmp     incsp2
L0AA3:	lda     #$01
	jmp     incsp2
L0A84:	lda     _rotState
	cmp     #$02
	jne     L0A88
	ldy     #$01
	lda     (sp),y
	bne     L0A86
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA4
	jmp     incsp2
L0AA4:	lda     #$01
	jmp     incsp2
L0A86:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA5
	jmp     incsp2
L0AA5:	lda     #$01
	jmp     incsp2
L0A88:	lda     _rotState
	cmp     #$03
	jne     L0A8C
	ldy     #$01
	lda     (sp),y
	bne     L0A8A
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA6
	jmp     incsp2
L0AA6:	lda     #$01
	jmp     incsp2
L0A8A:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA7
	jmp     incsp2
L0AA7:	lda     #$01
	jmp     incsp2
L0A8C:	lda     _curTet
	cmp     #$06
	beq     L0AA8
	jmp     incsp2
L0AA8:	lda     _rotState
	jne     L0A8F
	ldy     #$01
	lda     (sp),y
	bne     L047A
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AA9
	jmp     incsp2
L0AA9:	lda     #$01
	jmp     incsp2
L047A:	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AAA
	jmp     incsp2
L0AAA:	lda     #$01
	jmp     incsp2
L0A8F:	lda     _rotState
	cmp     #$01
	jne     L0A93
	tay
	lda     (sp),y
	bne     L0A91
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AAB
	jmp     incsp2
L0AAB:	lda     #$01
	jmp     incsp2
L0A91:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AAC
	jmp     incsp2
L0AAC:	lda     #$01
	jmp     incsp2
L0A93:	lda     _rotState
	cmp     #$02
	jne     L0A97
	ldy     #$01
	lda     (sp),y
	bne     L0A95
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AAD
	jmp     incsp2
L0AAD:	lda     #$01
	jmp     incsp2
L0A95:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0AAE
	jmp     incsp2
L0AAE:	lda     #$01
	jmp     incsp2
L0A97:	lda     _rotState
	cmp     #$03
	beq     L0AAF
	jmp     incsp2
L0AAF:	ldy     #$01
	lda     (sp),y
	bne     L0A99
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L052C
	lda     #$01
	jmp     incsp2
L0A99:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L052C
	lda     #$01
	jmp     incsp2
L052C:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ rotClockwise (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotClockwise: near

.segment	"CODE"

	lda     _curTet
	jne     L0AB5
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _rotState
	bne     L0AB4
	lda     _curPos+4
	sta     _curPos
	lda     _curPos+5
	sec
	sbc     #$02
	sta     _curPos+1
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	sec
	sbc     #$01
	sta     _curPos+3
	lda     _curPos+4
	sta     _curPos+6
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0AB2
L0AB4:	lda     _rotState
	cmp     #$01
	jne     L0AC5
	lda     _curPos+4
	sec
	sbc     #$02
	sta     _curPos
	lda     _curPos+5
	sta     _curPos+1
	lda     _curPos+4
	sec
	sbc     #$01
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+5
	jmp     L0AC8
L0AB5:	lda     _curTet
	cmp     #$02
	jne     L0AB9
	lda     _rotState
	bne     L0AB6
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0AB2
L0AB6:	lda     _rotState
	cmp     #$01
	bne     L0AB7
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$02
	jmp     L0AB2
L0AB7:	lda     _rotState
	cmp     #$02
	bne     L0AB8
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sta     _curPos+7
	lda     #$03
	jmp     L0AB2
L0AB8:	lda     _rotState
	cmp     #$03
	jne     L0AC5
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	jmp     L0ACC
L0AB9:	lda     _curTet
	cmp     #$03
	jne     L0ABB
	lda     _rotState
	bne     L0ABA
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	sta     _curPos
	lda     _curPos+5
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+7
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     #$01
	jmp     L0AB2
L0ABA:	lda     _rotState
	cmp     #$01
	jne     L0AC5
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sta     _curPos+7
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+3
	jmp     L0AC7
L0ABB:	lda     _curTet
	cmp     #$04
	jne     L0ABD
	lda     _rotState
	bne     L0ABC
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     #$01
	jmp     L0AB2
L0ABC:	lda     _rotState
	cmp     #$01
	jne     L0AC5
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+5
	sta     _curPos+1
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+7
	lda     _curPos+4
	sta     _curPos+4
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+5
	jmp     L0AC7
L0ABD:	lda     _curTet
	cmp     #$05
	jne     L0AC1
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _rotState
	bne     L0ABE
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0AB2
L0ABE:	lda     _rotState
	cmp     #$01
	bne     L0ABF
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$02
	jmp     L0AB2
L0ABF:	lda     _rotState
	cmp     #$02
	bne     L0AC0
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$03
	jmp     L0AB2
L0AC0:	lda     _rotState
	cmp     #$03
	jne     L0AC5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	jmp     L0ACC
L0AC1:	lda     _curTet
	cmp     #$06
	jne     L0AC5
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _rotState
	bne     L0AC2
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0AB2
L0AC2:	lda     _rotState
	cmp     #$01
	bne     L0AC3
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$02
	jmp     L0AB2
L0AC3:	lda     _rotState
	cmp     #$02
	bne     L0AC4
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$03
	jmp     L0AB2
L0AC4:	lda     _rotState
	cmp     #$03
	bne     L0AC5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
L0ACC:	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
L0AC8:	sta     _curPos+7
L0AC7:	lda     #$00
L0AB2:	sta     _rotState
L0AC5:	lda     #$00
	sta     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0934
L0AC6:	lda     _i
	asl     a
	bcc     L0AB0
	ldx     #$01
L0AB0:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0AB3
	inx
	clc
L0AB3:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     _blockTile
	jsr     _cputcxy
	inc     _i
L0934:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L0AC6
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkMove (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkMove: near

.segment	"CODE"

	jsr     _kbhit
	cmp     #$01
	bne     L095A
	jsr     _cgetc
	sta     _dirKey
	cmp     #$41
	bne     L0ACD
	jsr     _checkLeftCollision
	cmp     #$00
	bne     L0ACD
	lda     #$01
	jsr     _moveTet
L0ACD:	lda     _dirKey
	cmp     #$44
	bne     L0ACE
	jsr     _checkRightCollision
	cmp     #$00
	bne     L0ACE
	lda     #$02
	jsr     _moveTet
L0ACE:	lda     _dirKey
	cmp     #$53
	bne     L0AD0
	jsr     _checkBotCollision
	cmp     #$00
	bne     L0AD0
	lda     _isPlaced
	bne     L0AD0
	jsr     _moveTet
L0AD0:	lda     _dirKey
	cmp     #$57
	bne     L095A
	lda     #$00
	jsr     _checkRotateCollision
	cmp     #$00
	jeq     _rotClockwise
L095A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ handleScore (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleScore: near

.segment	"CODE"

	jsr     decsp8
	lda     #$00
	jsr     pusha
	sta     _i
	tax
	lda     #$06
	sta     _j
	jmp     L0AE4
L0AE2:	lda     _i
	asl     a
	bcc     L0ADB
	inx
	clc
L0ADB:	adc     #$01
	bcc     L096C
	inx
	clc
L096C:	adc     sp
	sta     sreg
	txa
	adc     sp+1
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0ADC
	inx
	clc
L0ADC:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	dey
	sta     (sreg),y
	jmp     L0AE3
L0971:	lda     _j
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0ADD
	inx
	clc
L0ADD:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	inc     _j
L0AE3:	lda     _j
	cmp     #$10
	bcc     L0971
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0ADE
	inx
	clc
L0ADE:	adc     #$01
	bcc     L097E
	inx
	clc
L097E:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	lda     (sp),y
	iny
	sta     (ptr1),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #$06
	sta     _j
	inc     _i
	ldx     #$00
L0AE4:	lda     _i
	cmp     #$04
	jcc     L0AE2
	stx     _i
	jmp     L0AEA
L0AE5:	lda     _i
	asl     a
	bcc     L0ADF
	inx
	clc
L0ADF:	adc     #$01
	bcc     L098F
	inx
	clc
L098F:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	cmp     #$0A
	jcc     L09C0
	lda     #$06
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0AE0
	inx
	clc
L0AE0:	adc     #$02
	bcc     L0996
	inx
	clc
L0996:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jsr     pusha
	lda     #$0A
	jsr     _cclearxy
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0AE1
	inx
	clc
L0AE1:	adc     #$01
	bcc     L099C
	inx
	clc
L099C:	adc     sp
	sta     ptr1
	txa
	adc     sp+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     _j
	lda     #$06
	sta     (sp),y
	jmp     L0AE9
L0AE6:	lda     (sp),y
	jsr     pusha
	lda     _j
	jsr     _gotoxy
	jsr     _cpeekc
	cpx     #$00
	bne     L0AEB
	cmp     _blockTile
	beq     L09AB
L0AEB:	lda     #$00
	jsr     _textcolor
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     _j
	clc
	adc     #$01
	jsr     pusha
	lda     #$20
	jmp     L0AF0
L09AB:	jsr     _cpeekcolor
	jsr     _textcolor
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     _j
	clc
	adc     #$01
	jsr     pusha
	lda     _blockTile
L0AF0:	jsr     _cputcxy
	ldy     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
L0AE8:	lda     (sp),y
	cmp     #$10
	bcc     L0AE6
	lda     #$06
	sta     (sp),y
	dec     _j
L0AE9:	lda     _j
	cmp     #$03
	bcs     L0AE8
	inc     _linesCleared
	bne     L09C0
	inc     _linesCleared+1
L09C0:	inc     _i
	ldx     #$00
L0AEA:	lda     _i
	cmp     #$04
	jcc     L0AE5
	ldy     #$09
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

	jsr     _pickTet
	jsr     _drawTet
	lda     #$14
	jsr     pusha
	jsr     _gotoxy
	lda     #<(L09C9)
	ldx     #>(L09C9)
	jsr     pushax
	lda     _linesCleared
	ldx     _linesCleared+1
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	jmp     L09CE
L0AF1:	lda     _isPlaced
	cmp     #$01
	bne     L09D0
	jsr     _handleScore
	lda     #$14
	jsr     pusha
	jsr     _gotoxy
	lda     #<(L09D7)
	ldx     #>(L09D7)
	jsr     pushax
	lda     _linesCleared
	ldx     _linesCleared+1
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	jsr     _pickTet
	jsr     _drawTet
	lda     #$00
	sta     _isPlaced
L09D0:	jsr     _checkMove
	jsr     _handleTet
	lda     #0
	sta     162
wait:	lda     162
	cmp     #$1E
	bne     wait
L09CE:	lda     _isGameOver
	cmp     #$01
	bne     L0AF1
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$00
	jsr     _cursor
	lda     #<(_xdim)
	ldx     #>(_xdim)
	jsr     pushax
	lda     #<(_ydim)
	ldx     #>(_ydim)
	jsr     _screensize
	jsr     _draw_title
L09F2:	jsr     _cgetc
	cmp     #$58
	bne     L09F2
	jsr     _draw_game
	jsr     _game_loop
	ldx     #$00
	txa
	rts

.endproc

