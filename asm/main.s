;
; File generated by cc65 v 2.17 - Git N/A
;
	.fopt		compiler,"cc65 v 2.17 - Git N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_rand
	.import		__randomize
	.import		_clrscr
	.import		_kbhit
	.import		_gotoxy
	.import		_cputcxy
	.import		_cprintf
	.import		_cgetc
	.import		_cpeekc
	.import		_cursor
	.import		_textcolor
	.import		_bgcolor
	.import		_bordercolor
	.import		_cclearxy
	.import		_screensize
	.import		_strlen
	.export		_main

.segment	"DATA"

_i:
	.byte	$00
_j:
	.byte	$00
_isPlaced:
	.byte	$00
_blockTile:
	.byte	$A9

.segment	"RODATA"

_Title:
	.byte	$D4,$C5,$D4,$D2,$C9,$D3,$36,$34,$00
_Inst:
	.byte	$D0,$D2,$C5,$D3,$D3,$20,$D8,$20,$D4,$CF,$20,$D0,$CC,$C1,$D9,$00
L0026:
	.byte	$25,$53,$00
L001D	:=	L0026+0

.segment	"BSS"

_xdim:
	.res	1,$00
_ydim:
	.res	1,$00
_isGameOver:
	.res	1,$00
_curTet:
	.res	1,$00
_curPos:
	.res	8,$00
_linesCleared:
	.res	2,$00
_xTet:
	.res	1,$00
_yTet:
	.res	1,$00
_curColor:
	.res	1,$00
_initPlacement:
	.res	1,$00
_rotState:
	.res	1,$00
_dirKey:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ draw_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_title: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$00
	jsr     _bgcolor
	lda     #$00
	jsr     _bordercolor
	lda     #$01
	jsr     _textcolor
	lda     _xdim
	jsr     pusha0
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     _strlen
	jsr     tossubax
	jsr     shrax1
	jsr     pusha
	lda     _ydim
	lsr     a
	sec
	sbc     #$01
	jsr     _gotoxy
	lda     #<(L001D)
	ldx     #>(L001D)
	jsr     pushax
	lda     #<(_Title)
	ldx     #>(_Title)
	jsr     pushax
	ldy     #$04
	jsr     _cprintf
	lda     _xdim
	jsr     pusha0
	lda     #<(_Inst)
	ldx     #>(_Inst)
	jsr     _strlen
	jsr     tossubax
	jsr     shrax1
	jsr     pusha
	lda     _ydim
	lsr     a
	jsr     _gotoxy
	lda     #<(L0026)
	ldx     #>(L0026)
	jsr     pushax
	lda     #<(_Inst)
	ldx     #>(_Inst)
	jsr     pushax
	ldy     #$04
	jmp     _cprintf

.endproc

; ---------------------------------------------------------------
; void __near__ draw_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_game: near

.segment	"CODE"

	jsr     _clrscr
	lda     #$01
	sta     _i
	jmp     L0997
L0996:	lda     _i
	clc
	adc     #$05
	jsr     pusha
	lda     #$02
	jsr     pusha
	lda     #$EF
	jsr     _cputcxy
	inc     _i
L0997:	lda     _i
	cmp     #$0B
	bcc     L0996
	lda     #$01
	sta     _i
	jmp     L0999
L0998:	lda     _i
	clc
	adc     #$05
	jsr     pusha
	lda     #$17
	jsr     pusha
	lda     #$F7
	jsr     _cputcxy
	inc     _i
L0999:	lda     _i
	cmp     #$0B
	bcc     L0998
	lda     #$01
	sta     _i
	jmp     L099A
L0043:	lda     #$05
	jsr     pusha
	lda     _i
	clc
	adc     #$02
	jsr     pusha
	lda     #$EA
	jsr     _cputcxy
	inc     _i
L099A:	lda     _i
	cmp     #$15
	bcc     L0043
	lda     #$01
	sta     _i
	jmp     L099B
L004E:	lda     #$10
	jsr     pusha
	lda     _i
	clc
	adc     #$02
	jsr     pusha
	lda     #$F4
	jsr     _cputcxy
	inc     _i
L099B:	lda     _i
	cmp     #$15
	bcc     L004E
	lda     #$03
	sta     _j
	lda     #$07
	sta     _i
	jmp     L099D
L005F:	lda     _i
	jsr     pusha
	lda     _j
	jsr     pusha
	lda     #$20
	jsr     _cputcxy
	inc     _j
L099C:	lda     _j
	cmp     #$17
	bcc     L005F
	inc     _i
L099D:	lda     _i
	cmp     #$0F
	bcc     L099C
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkIfEmpty (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkIfEmpty: near

.segment	"CODE"

	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L006D
	ldx     #$00
	lda     #$01
	jmp     incsp2
L006D:	ldx     #$00
	txa
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ drawTet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawTet: near

.segment	"CODE"

	lda     _curTet
	bne     L09A4
	lda     #$0E
	sta     _curColor
	lda     #$09
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     #$0A
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     #$0B
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     #$0C
	sta     _curPos+6
	lda     #$03
	sta     _curPos+7
	lda     #$09
	sta     _xTet
	lda     #$04
	sta     _yTet
L09A4:	lda     _curTet
	cmp     #$01
	bne     L09A5
	lda     #$07
	sta     _curColor
	lda     #$0A
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     #$0B
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     #$0A
	sta     _curPos+4
	lda     #$04
	sta     _curPos+5
	lda     #$0B
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
	lda     #$0A
	sta     _xTet
	lda     #$04
	sta     _yTet
L09A5:	lda     _curTet
	cmp     #$02
	bne     L09A6
	lda     #$04
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
	lda     _initPlacement
	sta     _xTet
	lda     #$04
	sta     _yTet
L09A6:	lda     _curTet
	cmp     #$03
	bne     L09A7
	lda     #$05
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$04
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$04
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+6
	lda     #$03
	sta     _curPos+7
	lda     _initPlacement
	sta     _xTet
	lda     #$04
	sta     _yTet
L09A7:	lda     _curTet
	cmp     #$04
	bne     L09A8
	lda     #$02
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+4
	lda     #$04
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
	lda     _initPlacement
	sta     _xTet
	lda     #$04
	sta     _yTet
L09A8:	lda     _curTet
	cmp     #$05
	bne     L09A9
	lda     #$08
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
	lda     _initPlacement
	sta     _xTet
	lda     #$04
	sta     _yTet
L09A9:	lda     _curTet
	cmp     #$06
	bne     L09AA
	sta     _curColor
	lda     _initPlacement
	sta     _curPos
	lda     #$03
	sta     _curPos+1
	lda     _initPlacement
	clc
	adc     #$01
	sta     _curPos+2
	lda     #$03
	sta     _curPos+3
	lda     _initPlacement
	clc
	adc     #$02
	sta     _curPos+4
	lda     #$03
	sta     _curPos+5
	lda     _initPlacement
	sta     _curPos+6
	lda     #$04
	sta     _curPos+7
	lda     _initPlacement
	sta     _xTet
	lda     #$04
	sta     _yTet
L09AA:	lda     #$00
	sta     _rotState
	tax
	sta     _i
	jmp     L09AC
L09AB:	lda     _i
	asl     a
	bcc     L099E
	ldx     #$01
L099E:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09A2
	inx
	clc
L09A2:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _checkIfEmpty
	cmp     #$01
	bne     L0192
	sta     _isGameOver
	rts
L0192:	inc     _i
	ldx     #$00
L09AC:	lda     _i
	cmp     #$04
	bcc     L09AB
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L01A3
L09AD:	lda     _i
	asl     a
	bcc     L09A0
	ldx     #$01
L09A0:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09A3
	inx
	clc
L09A3:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     _blockTile
	jsr     _cputcxy
	inc     _i
L01A3:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L09AD
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ pickTet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pickTet: near

.segment	"CODE"

	jsr     __randomize
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	sta     _curTet
	jsr     _rand
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmoda0
	clc
	adc     #$06
	sta     _initPlacement
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkBotCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkBotCollision: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	tax
	sta     _i
	jmp     L09BA
L09B8:	lda     _i
	asl     a
	bcc     L09B4
	ldx     #$01
	clc
L09B4:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	sec
	dey
	sbc     (sp),y
	bcc     L09B9
	beq     L09B9
	lda     _i
	asl     a
	bcc     L09B5
	inx
	clc
L09B5:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	dey
	sta     (sp),y
L09B9:	inc     _i
	ldx     #$00
L09BA:	lda     _i
	cmp     #$04
	bcc     L09B8
	stx     _i
	jmp     L09BD
L09BB:	lda     _i
	asl     a
	bcc     L09B6
	ldx     #$01
	clc
L09B6:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	ldx     #$00
	lda     (ptr1),y
	dey
	cmp     (sp),y
	bcc     L01D8
	lda     _i
	asl     a
	bcc     L09B1
	inx
L09B1:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09B7
	inx
	clc
L09B7:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L01D8
	ldx     #$00
	lda     #$01
	jmp     incsp1
L01D8:	inc     _i
	ldx     #$00
L09BD:	lda     _i
	cmp     #$04
	bcc     L09BB
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ moveTet (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_moveTet: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (sp),y
	jne     L09DF
	sta     _i
	jmp     L09DA
L01E2:	lda     #$00
	jsr     _textcolor
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09BE
	inx
L09BE:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D0
	inx
	clc
L09D0:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	inc     _i
L09DA:	lda     _i
	cmp     #$04
	bcc     L01E2
	ldx     #$00
	stx     _i
	jmp     L09DC
L09DB:	lda     _i
	asl     a
	bcc     L09D1
	ldx     #$01
	clc
L09D1:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D2
	inx
	clc
L09D2:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	iny
	sta     (ptr1),y
	inc     _i
	jsr     incsp1
	ldx     #$00
L09DC:	lda     _i
	cmp     #$04
	bcc     L09DB
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0205
L09DD:	lda     _i
	asl     a
	bcc     L09C2
	ldx     #$01
L09C2:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D3
	inx
	clc
L09D3:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$A9
	jsr     _cputcxy
	inc     _i
L0205:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L09DD
	ldy     #$00
L09DF:	lda     (sp),y
	cmp     #$01
	jne     L09E5
	sty     _i
	jmp     L09E0
L0214:	lda     #$00
	jsr     _textcolor
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09C4
	inx
L09C4:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D4
	inx
	clc
L09D4:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	inc     _i
L09E0:	lda     _i
	cmp     #$04
	bcc     L0214
	ldx     #$00
	stx     _i
	jmp     L09E2
L09E1:	lda     _i
	asl     a
	bcc     L09C6
	ldx     #$01
L09C6:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D5
	inx
	clc
L09D5:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	sec
	sbc     #$01
	sta     (ptr1),y
	inc     _i
	jsr     incsp1
	ldx     #$00
L09E2:	lda     _i
	cmp     #$04
	bcc     L09E1
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0237
L09E3:	lda     _i
	asl     a
	bcc     L09C8
	ldx     #$01
L09C8:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D6
	inx
	clc
L09D6:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$A9
	jsr     _cputcxy
	inc     _i
L0237:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L09E3
	ldy     #$00
L09E5:	lda     (sp),y
	cmp     #$02
	beq     L09EA
	jmp     incsp1
L09EA:	sty     _i
	jmp     L09E6
L0246:	lda     #$00
	jsr     _textcolor
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09CA
	inx
L09CA:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D7
	inx
	clc
L09D7:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	inc     _i
L09E6:	lda     _i
	cmp     #$04
	bcc     L0246
	ldx     #$00
	stx     _i
	jmp     L09E8
L09E7:	lda     _i
	asl     a
	bcc     L09CC
	ldx     #$01
L09CC:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D8
	inx
	clc
L09D8:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	sta     (ptr1),y
	inc     _i
	jsr     incsp1
	ldx     #$00
L09E8:	lda     _i
	cmp     #$04
	bcc     L09E7
	stx     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0269
L09E9:	lda     _i
	asl     a
	bcc     L09CE
	ldx     #$01
L09CE:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09D9
	inx
	clc
L09D9:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     #$A9
	jsr     _cputcxy
	inc     _i
L0269:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L09E9
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ handleTet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handleTet: near

.segment	"CODE"

	jsr     _checkBotCollision
	cmp     #$01
	bne     L0275
	sta     _isPlaced
	rts
L0275:	lda     #$00
	jmp     _moveTet

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkLeftCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkLeftCollision: near

.segment	"CODE"

	lda     #$FF
	jsr     pusha
	ldx     #$00
	stx     _i
	jmp     L09F4
L09F2:	lda     _i
	asl     a
	bcc     L09EB
	ldx     #$01
L09EB:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	ldy     #$00
	cmp     (sp),y
	bcs     L09F3
	lda     _i
	asl     a
	bcc     L09EC
	inx
L09EC:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
L09F3:	inc     _i
	ldx     #$00
L09F4:	lda     _i
	cmp     #$04
	bcc     L09F2
	stx     _i
	jmp     L09F7
L09F5:	lda     _i
	asl     a
	bcc     L09ED
	ldx     #$01
L09ED:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L09F6
	bne     L029F
L09F6:	lda     _i
	asl     a
	bcc     L09EE
	inx
L09EE:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	sec
	sbc     #$01
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09F1
	inx
	clc
L09F1:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L029F
	ldx     #$00
	lda     #$01
	jmp     incsp1
L029F:	inc     _i
	ldx     #$00
L09F7:	lda     _i
	cmp     #$04
	bcc     L09F5
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkRightCollision (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkRightCollision: near

.segment	"CODE"

	lda     #$00
	jsr     pusha
	tax
	sta     _i
	jmp     L0A01
L09FF:	lda     _i
	asl     a
	bcc     L09F8
	ldx     #$01
L09F8:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	sec
	ldy     #$00
	sbc     (sp),y
	bcc     L0A00
	beq     L0A00
	lda     _i
	asl     a
	bcc     L09F9
	inx
L09F9:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
L0A00:	inc     _i
	ldx     #$00
L0A01:	lda     _i
	cmp     #$04
	bcc     L09FF
	stx     _i
	jmp     L0A04
L0A02:	lda     _i
	asl     a
	bcc     L09FA
	ldx     #$01
L09FA:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	ldx     #$00
	lda     (ptr1),y
	ldy     #$00
	cmp     (sp),y
	bcc     L02C7
	lda     _i
	asl     a
	bcc     L09FB
	inx
L09FB:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	clc
	adc     #$01
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L09FE
	inx
	clc
L09FE:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     _gotoxy
	jsr     _cpeekc
	cmp     #$20
	beq     L02C7
	ldx     #$00
	lda     #$01
	jmp     incsp1
L02C7:	inc     _i
	ldx     #$00
L0A04:	lda     _i
	cmp     #$04
	bcc     L0A02
	txa
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ checkRotateCollision (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkRotateCollision: near

.segment	"CODE"

	jsr     pusha
	lda     #$00
	jsr     pusha
	tax
	lda     _curTet
	jne     L0A09
	lda     _rotState
	bne     L0A07
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	sec
	sbc     #$02
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A31
	jmp     incsp2
L0A31:	lda     #$01
	jmp     incsp2
L0A07:	lda     _curPos+4
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+5
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+5
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	sec
	sbc     #$02
	jsr     pusha
	lda     _curPos+5
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A32
	jmp     incsp2
L0A32:	lda     #$01
	jmp     incsp2
L0A09:	lda     _curTet
	cmp     #$02
	jne     L0A0D
	lda     _rotState
	bne     L0A0A
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L030E
	ldx     #$00
	lda     #$01
	jmp     incsp2
L030E:	tax
	jmp     incsp2
L0A0A:	lda     _rotState
	cmp     #$01
	bne     L0A0B
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L031A
	ldx     #$00
	lda     #$01
	jmp     incsp2
L031A:	tax
	jmp     incsp2
L0A0B:	lda     _rotState
	cmp     #$02
	bne     L0A0C
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L0326
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0326:	tax
	jmp     incsp2
L0A0C:	lda     _rotState
	cmp     #$03
	bne     L0A0D
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	cmp     #$00
	beq     L0332
	ldx     #$00
	lda     #$01
	jmp     incsp2
L0332:	tax
	jmp     incsp2
L0A0D:	lda     _curTet
	cmp     #$03
	jne     L0A10
	lda     _rotState
	bne     L033E
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+5
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A33
	jmp     incsp2
L0A33:	lda     #$01
	jmp     incsp2
L033E:	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A34
	jmp     incsp2
L0A34:	lda     #$01
	jmp     incsp2
L0A10:	lda     _curTet
	cmp     #$04
	jne     L0A14
	lda     _rotState
	bne     L0A12
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A35
	jmp     incsp2
L0A35:	lda     #$01
	jmp     incsp2
L0A12:	lda     _curPos+4
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+4
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+5
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A36
	jmp     incsp2
L0A36:	lda     #$01
	jmp     incsp2
L0A14:	lda     _curTet
	cmp     #$05
	jne     L0A23
	lda     _rotState
	jne     L0A17
	ldy     #$01
	lda     (sp),y
	bne     L0398
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A37
	jmp     incsp2
L0A37:	lda     #$01
	jmp     incsp2
L0398:	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A38
	jmp     incsp2
L0A38:	lda     #$01
	jmp     incsp2
L0A17:	lda     _rotState
	cmp     #$01
	jne     L0A1B
	tay
	lda     (sp),y
	bne     L0A19
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A39
	jmp     incsp2
L0A39:	lda     #$01
	jmp     incsp2
L0A19:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A3A
	jmp     incsp2
L0A3A:	lda     #$01
	jmp     incsp2
L0A1B:	lda     _rotState
	cmp     #$02
	jne     L0A1F
	ldy     #$01
	lda     (sp),y
	bne     L0A1D
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A3B
	jmp     incsp2
L0A3B:	lda     #$01
	jmp     incsp2
L0A1D:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A3C
	jmp     incsp2
L0A3C:	lda     #$01
	jmp     incsp2
L0A1F:	lda     _rotState
	cmp     #$03
	jne     L0A23
	ldy     #$01
	lda     (sp),y
	bne     L0A21
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A3D
	jmp     incsp2
L0A3D:	lda     #$01
	jmp     incsp2
L0A21:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A3E
	jmp     incsp2
L0A3E:	lda     #$01
	jmp     incsp2
L0A23:	lda     _curTet
	cmp     #$06
	beq     L0A3F
	jmp     incsp2
L0A3F:	lda     _rotState
	jne     L0A26
	ldy     #$01
	lda     (sp),y
	bne     L048A
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A40
	jmp     incsp2
L0A40:	lda     #$01
	jmp     incsp2
L048A:	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A41
	jmp     incsp2
L0A41:	lda     #$01
	jmp     incsp2
L0A26:	lda     _rotState
	cmp     #$01
	jne     L0A2A
	tay
	lda     (sp),y
	bne     L0A28
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A42
	jmp     incsp2
L0A42:	lda     #$01
	jmp     incsp2
L0A28:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A43
	jmp     incsp2
L0A43:	lda     #$01
	jmp     incsp2
L0A2A:	lda     _rotState
	cmp     #$02
	jne     L0A2E
	ldy     #$01
	lda     (sp),y
	bne     L0A2C
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	clc
	adc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A44
	jmp     incsp2
L0A44:	lda     #$01
	jmp     incsp2
L0A2C:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	bne     L0A45
	jmp     incsp2
L0A45:	lda     #$01
	jmp     incsp2
L0A2E:	lda     _rotState
	cmp     #$03
	beq     L0A46
	jmp     incsp2
L0A46:	ldy     #$01
	lda     (sp),y
	bne     L0A30
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L053C
	lda     #$01
	jmp     incsp2
L0A30:	lda     _curPos+2
	sec
	sbc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	lda     _curPos+2
	clc
	adc     #$01
	jsr     pusha
	lda     _curPos+3
	sec
	sbc     #$01
	jsr     _checkIfEmpty
	ldy     #$00
	clc
	adc     (sp),y
	sta     (sp),y
	ldx     #$00
	lda     (sp),y
	beq     L053C
	lda     #$01
	jmp     incsp2
L053C:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ rotClockwise (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_rotClockwise: near

.segment	"CODE"

	lda     _curTet
	jne     L0A4C
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _rotState
	bne     L0A4B
	lda     _curPos+4
	sta     _curPos
	lda     _curPos+5
	sec
	sbc     #$02
	sta     _curPos+1
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	sec
	sbc     #$01
	sta     _curPos+3
	lda     _curPos+4
	sta     _curPos+6
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0A49
L0A4B:	lda     _rotState
	cmp     #$01
	jne     L0A5C
	lda     _curPos+4
	sec
	sbc     #$02
	sta     _curPos
	lda     _curPos+5
	sta     _curPos+1
	lda     _curPos+4
	sec
	sbc     #$01
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+5
	jmp     L0A5F
L0A4C:	lda     _curTet
	cmp     #$02
	jne     L0A50
	lda     _rotState
	bne     L0A4D
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0A49
L0A4D:	lda     _rotState
	cmp     #$01
	bne     L0A4E
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$02
	jmp     L0A49
L0A4E:	lda     _rotState
	cmp     #$02
	bne     L0A4F
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sta     _curPos+7
	lda     #$03
	jmp     L0A49
L0A4F:	lda     _rotState
	cmp     #$03
	jne     L0A5C
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	jmp     L0A63
L0A50:	lda     _curTet
	cmp     #$03
	jne     L0A52
	lda     _rotState
	bne     L0A51
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	sta     _curPos
	lda     _curPos+5
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+7
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     #$01
	jmp     L0A49
L0A51:	lda     _rotState
	cmp     #$01
	jne     L0A5C
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sta     _curPos+7
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+3
	jmp     L0A5E
L0A52:	lda     _curTet
	cmp     #$04
	jne     L0A54
	lda     _rotState
	bne     L0A53
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     #$01
	jmp     L0A49
L0A53:	lda     _rotState
	cmp     #$01
	jne     L0A5C
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+2
	jsr     pusha
	lda     _curPos+3
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+5
	sta     _curPos+1
	lda     _curPos+4
	sta     _curPos+2
	lda     _curPos+5
	sta     _curPos+3
	lda     _curPos+4
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+7
	lda     _curPos+4
	sta     _curPos+4
	lda     _curPos+5
	clc
	adc     #$01
	sta     _curPos+5
	jmp     L0A5E
L0A54:	lda     _curTet
	cmp     #$05
	jne     L0A58
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _rotState
	bne     L0A55
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0A49
L0A55:	lda     _rotState
	cmp     #$01
	bne     L0A56
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$02
	jmp     L0A49
L0A56:	lda     _rotState
	cmp     #$02
	bne     L0A57
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$03
	jmp     L0A49
L0A57:	lda     _rotState
	cmp     #$03
	jne     L0A5C
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	jmp     L0A63
L0A58:	lda     _curTet
	cmp     #$06
	jne     L0A5C
	lda     _curPos
	jsr     pusha
	lda     _curPos+1
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+4
	jsr     pusha
	lda     _curPos+5
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _curPos+6
	jsr     pusha
	lda     _curPos+7
	jsr     pusha
	lda     #$01
	jsr     _cclearxy
	lda     _rotState
	bne     L0A59
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$01
	jmp     L0A49
L0A59:	lda     _rotState
	cmp     #$01
	bne     L0A5A
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+7
	lda     #$02
	jmp     L0A49
L0A5A:	lda     _rotState
	cmp     #$02
	bne     L0A5B
	lda     _curPos+2
	sta     _curPos
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+1
	lda     _curPos+2
	sta     _curPos+4
	lda     _curPos+3
	sec
	sbc     #$01
	sta     _curPos+5
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
	sta     _curPos+7
	lda     #$03
	jmp     L0A49
L0A5B:	lda     _rotState
	cmp     #$03
	bne     L0A5C
	lda     _curPos+2
	sec
	sbc     #$01
	sta     _curPos
	lda     _curPos+3
	sta     _curPos+1
	lda     _curPos+2
	clc
	adc     #$01
	sta     _curPos+4
	lda     _curPos+3
	sta     _curPos+5
	lda     _curPos+2
	sec
	sbc     #$01
L0A63:	sta     _curPos+6
	lda     _curPos+3
	clc
	adc     #$01
L0A5F:	sta     _curPos+7
L0A5E:	lda     #$00
L0A49:	sta     _rotState
L0A5C:	lda     #$00
	sta     _i
	lda     _curColor
	jsr     _textcolor
	jmp     L0944
L0A5D:	lda     _i
	asl     a
	bcc     L0A47
	ldx     #$01
L0A47:	sta     ptr1
	txa
	clc
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #<(_curPos)
	lda     (ptr1),y
	jsr     pusha
	ldx     #$00
	lda     _i
	asl     a
	bcc     L0A4A
	inx
	clc
L0A4A:	adc     #<(_curPos)
	sta     ptr1
	txa
	adc     #>(_curPos)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha
	lda     _blockTile
	jsr     _cputcxy
	inc     _i
L0944:	ldx     #$00
	lda     _i
	cmp     #$04
	bcc     L0A5D
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ checkMove (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_checkMove: near

.segment	"CODE"

	jsr     _kbhit
	cmp     #$01
	bne     L096A
	jsr     _cgetc
	sta     _dirKey
	cmp     #$41
	bne     L0A64
	jsr     _checkLeftCollision
	cmp     #$00
	bne     L0A64
	lda     #$01
	jsr     _moveTet
L0A64:	lda     _dirKey
	cmp     #$44
	bne     L0A65
	jsr     _checkRightCollision
	cmp     #$00
	bne     L0A65
	lda     #$02
	jsr     _moveTet
L0A65:	lda     _dirKey
	cmp     #$53
	bne     L0A67
	jsr     _checkBotCollision
	cmp     #$00
	bne     L0A67
	lda     _isPlaced
	bne     L0A67
	jsr     _moveTet
L0A67:	lda     _dirKey
	cmp     #$57
	bne     L096A
	lda     #$00
	jsr     _checkRotateCollision
	cmp     #$00
	jeq     _rotClockwise
L096A:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

	jsr     _pickTet
	jsr     _drawTet
	jmp     L0973
L0A68:	lda     _isPlaced
	cmp     #$01
	bne     L0975
	jsr     _pickTet
	jsr     _drawTet
	lda     #$00
	sta     _isPlaced
L0975:	jsr     _checkMove
	jsr     _handleTet
	lda     #0
	sta     162
wait:	lda     162
	cmp     #$1E
	bne     wait
L0973:	lda     _isGameOver
	cmp     #$01
	bne     L0A68
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #$00
	jsr     _cursor
	lda     #<(_xdim)
	ldx     #>(_xdim)
	jsr     pushax
	lda     #<(_ydim)
	ldx     #>(_ydim)
	jsr     _screensize
	jsr     _draw_title
L098F:	jsr     _cgetc
	cmp     #$58
	bne     L098F
	jsr     _draw_game
	jsr     _game_loop
	ldx     #$00
	txa
	rts

.endproc

